<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.Ports</name>
    </assembly>
    <members>
        <member name="T:System.IO.PathInternal">
            <summary>Contains internal path helpers that are shared between many projects.</summary>
        </member>
        <member name="M:System.IO.PathInternal.IsValidDriveChar(System.Char)">
            <summary>
            Returns true if the given character is a valid drive letter
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.EnsureExtendedPrefixIfNeeded(System.String)">
            <summary>
            Adds the extended path prefix (\\?\) if not already a device path, IF the path is not relative,
            AND the path is more than 259 characters. (> MAX_PATH + null). This will also insert the extended
            prefix if the path ends with a period or a space. Trailing periods and spaces are normally eaten
            away from paths during normalization, but if we see such a path at this point it should be
            normalized and has retained the final characters. (Typically from one of the *Info classes)
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.EnsureExtendedPrefix(System.String)">
            <summary>
            Adds the extended path prefix (\\?\) if not relative or already a device path.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsDevice(System.String)">
            <summary>
            Returns true if the path uses any of the DOS device path syntaxes. ("\\.\", "\\?\", or "\??\")
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsExtended(System.String)">
            <summary>
            Returns true if the path uses the canonical form of extended syntax ("\\?\" or "\??\"). If the
            path matches exactly (cannot use alternate directory separators) Windows will skip normalization
            and path length checks.
            </summary>
        </member>
        <member name="M:System.IO.PathInternal.IsPartiallyQualified(System.String)">
            <summary>
            Returns true if the path specified is relative to the current drive or working directory.
            Returns false if the path is fixed to a specific drive or UNC path.  This method does no
            validation of the path (URIs will be returned as relative as a result).
            </summary>
            <remarks>
            Handles paths that use the alternate directory separator.  It is a frequent mistake to
            assume that rooted paths (Path.IsPathRooted) are not relative.  This isn't the case.
            "C:a" is drive relative- meaning that it will be resolved against the current directory
            for C: (rooted, but relative). "C:\a" is rooted and not relative (the current directory
            will not be used to modify the path).
            </remarks>
        </member>
        <member name="M:System.IO.PathInternal.IsDirectorySeparator(System.Char)">
            <summary>
            True if the given character is a directory separator.
            </summary>
        </member>
        <member name="T:System.IO.Win32Marshal">
            <summary>
            Provides static methods for converting from Win32 errors codes to exceptions, HRESULTS and error messages.
            </summary>
        </member>
        <member name="M:System.IO.Win32Marshal.GetExceptionForLastWin32Error(System.String)">
            <summary>
            Converts, resetting it, the last Win32 error into a corresponding <see cref="T:System.Exception"/> object, optionally
            including the specified path in the error message.
            </summary>
        </member>
        <member name="M:System.IO.Win32Marshal.GetExceptionForWin32Error(System.Int32,System.String)">
            <summary>
            Converts the specified Win32 error into a corresponding <see cref="T:System.Exception"/> object, optionally
            including the specified path in the error message.
            </summary>
        </member>
        <member name="M:System.IO.Win32Marshal.MakeHRFromErrorCode(System.Int32)">
            <summary>
            If not already an HRESULT, returns an HRESULT for the specified Win32 error code.
            </summary>
        </member>
        <member name="M:System.IO.Win32Marshal.TryMakeWin32ErrorCodeFromHR(System.Int32)">
            <summary>
            Returns a Win32 error code for the specified HRESULT if it came from FACILITY_WIN32
            If not, returns the HRESULT unchanged
            </summary>
        </member>
        <member name="M:System.IO.Win32Marshal.GetMessage(System.Int32)">
            <summary>
            Returns a string message for the specified Win32 error code.
            </summary>
        </member>
        <member name="P:System.SR.IO_EOF_ReadBeyondEOF">
            <summary>Unable to read beyond the end of the stream.</summary>
        </member>
        <member name="P:System.SR.BaseStream_Invalid_Not_Open">
            <summary>The BaseStream is only available when the port is open.</summary>
        </member>
        <member name="P:System.SR.PortNameEmpty_String">
            <summary>The PortName cannot be empty.</summary>
        </member>
        <member name="P:System.SR.Port_not_open">
            <summary>The port is closed.</summary>
        </member>
        <member name="P:System.SR.Port_already_open">
            <summary>The port is already open.</summary>
        </member>
        <member name="P:System.SR.Cant_be_set_when_open">
            <summary>'{0}' cannot be set while the port is open.</summary>
        </member>
        <member name="P:System.SR.Max_Baud">
            <summary>The maximum baud rate for the device is {0}.</summary>
        </member>
        <member name="P:System.SR.In_Break_State">
            <summary>The port is in the break state and cannot be written to.</summary>
        </member>
        <member name="P:System.SR.Write_timed_out">
            <summary>The write timed out.</summary>
        </member>
        <member name="P:System.SR.CantSetRtsWithHandshaking">
            <summary>RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff.</summary>
        </member>
        <member name="P:System.SR.NotSupportedEncoding">
            <summary>SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation.</summary>
        </member>
        <member name="P:System.SR.Arg_InvalidSerialPort">
            <summary>The given port name ({0}) does not resolve to a valid serial port.</summary>
        </member>
        <member name="P:System.SR.Arg_InvalidSerialPortExtended">
            <summary>The given port name is invalid.  It may be a valid port, but not a serial port.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOffLen">
            <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Bounds_Lower_Upper">
            <summary>Argument must be between {0} and {1}.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Enum">
            <summary>Enum value was out of legal range.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedNonNegNumRequired">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedPosNum">
            <summary>Positive number required.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Timeout">
            <summary>The timeout must be greater than or equal to -1.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_WriteTimeout">
            <summary>The timeout must be either a positive number or -1.</summary>
        </member>
        <member name="P:System.SR.IndexOutOfRange_IORaceCondition">
            <summary>Probable I/O race condition detected while copying memory. The I/O package is not thread safe by default. In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's  ...</summary>
        </member>
        <member name="P:System.SR.IO_OperationAborted">
            <summary>The I/O operation has been aborted because of either a thread exit or an application request.</summary>
        </member>
        <member name="P:System.SR.NotSupported_UnseekableStream">
            <summary>Stream does not support seeking.</summary>
        </member>
        <member name="P:System.SR.ObjectDisposed_StreamClosed">
            <summary>Cannot access a closed stream.</summary>
        </member>
        <member name="P:System.SR.InvalidNullEmptyArgument">
            <summary>Argument {0} cannot be null or zero-length.</summary>
        </member>
        <member name="P:System.SR.Arg_WrongAsyncResult">
            <summary>IAsyncResult object did not come from the corresponding async method on this type.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_EndReadCalledMultiple">
            <summary>EndRead can only be called once for each asynchronous operation.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_EndWriteCalledMultiple">
            <summary>EndWrite can only be called once for each asynchronous operation.</summary>
        </member>
        <member name="P:System.SR.IO_PortNotFound">
            <summary>The specified port does not exist.</summary>
        </member>
        <member name="P:System.SR.IO_PortNotFoundFileName">
            <summary>The port '{0}' does not exist.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_NoPortName">
            <summary>Access to the port is denied.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_PortName">
            <summary>The specified port name is too long.  The port name must be less than 260 characters.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_NoPortName">
            <summary>The process cannot access the port because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_Port">
            <summary>The process cannot access the port '{0}' because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_Port">
            <summary>Access to the port '{0}' is denied.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_IOPorts">
            <summary>System.IO.Ports is currently only supported on Windows.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_SerialPort_GetPortNames">
            <summary>Enumeration of serial port names is not supported on the current platform.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_Path_PortName">
            <summary>The specified port name '{0}' is too long.  The port name must be less than 260 characters.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong">
            <summary>The specified file name or path is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_NoPathName">
            <summary>Could not find a part of the path.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_Path">
            <summary>Could not find a part of the path '{0}'.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound">
            <summary>Unable to find the specified file.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound_FileName">
            <summary>Could not find file '{0}'.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_NoPathName">
            <summary>Access to the path is denied.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_Path">
            <summary>Access to the path '{0}' is denied.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_Path">
            <summary>The path '{0}' is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_File">
            <summary>The process cannot access the file '{0}' because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_NoFileName">
            <summary>The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_FileLengthTooBig">
            <summary>Specified file length was too large for the file system.</summary>
        </member>
        <member name="P:System.SR.IO_FileExists_Name">
            <summary>The file '{0}' already exists.</summary>
        </member>
        <member name="P:System.SR.IO_AlreadyExists_Name">
            <summary>Cannot create '{0}' because a file or directory with the same name already exists.</summary>
        </member>
        <member name="M:Interop.Kernel32.GetMessage(System.Int32)">
            <summary>
                Returns a string message for the specified Win32 error code.
            </summary>
        </member>
        <member name="M:Interop.Kernel32.CreateFilePrivate(System.String,System.Int32,System.IO.FileShare,Interop.Kernel32.SECURITY_ATTRIBUTES*,System.IO.FileMode,System.Int32,System.IntPtr)">
            <summary>
            WARNING: This method does not implicitly handle long paths. Use CreateFile.
            </summary>
        </member>
        <member name="T:Interop.BOOL">
            <summary>
            Blittable version of Windows BOOL type. It is convenient in situations where
            manual marshalling is required, or to avoid overhead of regular bool marshalling.
            </summary>
            <remarks>
            Some Windows APIs return arbitrary integer values although the return type is defined
            as BOOL. It is best to never compare BOOL to TRUE. Always use bResult != BOOL.FALSE
            or bResult == BOOL.FALSE .
            </remarks>
        </member>
    </members>
</doc>
