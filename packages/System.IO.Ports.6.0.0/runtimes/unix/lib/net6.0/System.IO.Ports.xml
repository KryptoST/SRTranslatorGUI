<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IO.Ports</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.GetTask(System.IAsyncResult)">
            <summary>Gets the task represented by the IAsyncResult.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.ThrowArgumentException(System.IAsyncResult)">
            <summary>Throws an argument exception for the invalid <paramref name="asyncResult"/>.</summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskToApm.TaskAsyncResult">
            <summary>Provides a simple IAsyncResult that wraps a Task.</summary>
            <remarks>
            We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
            but that's very rare, in particular in a situation where someone cares about allocation, and always
            using TaskAsyncResult simplifies things and enables additional optimizations.
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._callback">
            <summary>Callback to invoke when the wrapped task completes.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.AsyncCallback)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the associated object state.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value.</param>
            <param name="callback">Callback to invoke when the wrapped task completes.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToApm.TaskAsyncResult.InvokeCallback">
            <summary>Invokes the callback.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
            <remarks>This is set lazily based on whether the <see cref="F:System.Threading.Tasks.TaskToApm.TaskAsyncResult._task"/> has completed by the time this object is created.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.IsCompleted">
            <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToApm.TaskAsyncResult.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="P:System.SR.IO_EOF_ReadBeyondEOF">
            <summary>Unable to read beyond the end of the stream.</summary>
        </member>
        <member name="P:System.SR.BaseStream_Invalid_Not_Open">
            <summary>The BaseStream is only available when the port is open.</summary>
        </member>
        <member name="P:System.SR.PortNameEmpty_String">
            <summary>The PortName cannot be empty.</summary>
        </member>
        <member name="P:System.SR.Port_not_open">
            <summary>The port is closed.</summary>
        </member>
        <member name="P:System.SR.Port_already_open">
            <summary>The port is already open.</summary>
        </member>
        <member name="P:System.SR.Cant_be_set_when_open">
            <summary>'{0}' cannot be set while the port is open.</summary>
        </member>
        <member name="P:System.SR.Max_Baud">
            <summary>The maximum baud rate for the device is {0}.</summary>
        </member>
        <member name="P:System.SR.In_Break_State">
            <summary>The port is in the break state and cannot be written to.</summary>
        </member>
        <member name="P:System.SR.Write_timed_out">
            <summary>The write timed out.</summary>
        </member>
        <member name="P:System.SR.CantSetRtsWithHandshaking">
            <summary>RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff.</summary>
        </member>
        <member name="P:System.SR.NotSupportedEncoding">
            <summary>SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation.</summary>
        </member>
        <member name="P:System.SR.Arg_InvalidSerialPort">
            <summary>The given port name ({0}) does not resolve to a valid serial port.</summary>
        </member>
        <member name="P:System.SR.Arg_InvalidSerialPortExtended">
            <summary>The given port name is invalid.  It may be a valid port, but not a serial port.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidOffLen">
            <summary>Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Bounds_Lower_Upper">
            <summary>Argument must be between {0} and {1}.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Enum">
            <summary>Enum value was out of legal range.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedNonNegNumRequired">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedPosNum">
            <summary>Positive number required.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_Timeout">
            <summary>The timeout must be greater than or equal to -1.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_WriteTimeout">
            <summary>The timeout must be either a positive number or -1.</summary>
        </member>
        <member name="P:System.SR.IndexOutOfRange_IORaceCondition">
            <summary>Probable I/O race condition detected while copying memory. The I/O package is not thread safe by default. In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's  ...</summary>
        </member>
        <member name="P:System.SR.IO_OperationAborted">
            <summary>The I/O operation has been aborted because of either a thread exit or an application request.</summary>
        </member>
        <member name="P:System.SR.NotSupported_UnseekableStream">
            <summary>Stream does not support seeking.</summary>
        </member>
        <member name="P:System.SR.ObjectDisposed_StreamClosed">
            <summary>Cannot access a closed stream.</summary>
        </member>
        <member name="P:System.SR.InvalidNullEmptyArgument">
            <summary>Argument {0} cannot be null or zero-length.</summary>
        </member>
        <member name="P:System.SR.Arg_WrongAsyncResult">
            <summary>IAsyncResult object did not come from the corresponding async method on this type.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_EndReadCalledMultiple">
            <summary>EndRead can only be called once for each asynchronous operation.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_EndWriteCalledMultiple">
            <summary>EndWrite can only be called once for each asynchronous operation.</summary>
        </member>
        <member name="P:System.SR.IO_PortNotFound">
            <summary>The specified port does not exist.</summary>
        </member>
        <member name="P:System.SR.IO_PortNotFoundFileName">
            <summary>The port '{0}' does not exist.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_NoPortName">
            <summary>Access to the port is denied.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_PortName">
            <summary>The specified port name is too long.  The port name must be less than 260 characters.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_NoPortName">
            <summary>The process cannot access the port because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_Port">
            <summary>The process cannot access the port '{0}' because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_Port">
            <summary>Access to the port '{0}' is denied.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_IOPorts">
            <summary>System.IO.Ports is currently only supported on Windows.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_SerialPort_GetPortNames">
            <summary>Enumeration of serial port names is not supported on the current platform.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_Path_PortName">
            <summary>The specified port name '{0}' is too long.  The port name must be less than 260 characters.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong">
            <summary>The specified file name or path is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_NoPathName">
            <summary>Could not find a part of the path.</summary>
        </member>
        <member name="P:System.SR.IO_PathNotFound_Path">
            <summary>Could not find a part of the path '{0}'.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound">
            <summary>Unable to find the specified file.</summary>
        </member>
        <member name="P:System.SR.IO_FileNotFound_FileName">
            <summary>Could not find file '{0}'.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_NoPathName">
            <summary>Access to the path is denied.</summary>
        </member>
        <member name="P:System.SR.UnauthorizedAccess_IODenied_Path">
            <summary>Access to the path '{0}' is denied.</summary>
        </member>
        <member name="P:System.SR.IO_PathTooLong_Path">
            <summary>The path '{0}' is too long, or a component of the specified path is too long.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_File">
            <summary>The process cannot access the file '{0}' because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.IO_SharingViolation_NoFileName">
            <summary>The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_FileLengthTooBig">
            <summary>Specified file length was too large for the file system.</summary>
        </member>
        <member name="P:System.SR.IO_FileExists_Name">
            <summary>The file '{0}' already exists.</summary>
        </member>
        <member name="P:System.SR.IO_AlreadyExists_Name">
            <summary>Cannot create '{0}' because a file or directory with the same name already exists.</summary>
        </member>
        <member name="M:Interop.Serial.Read(System.Runtime.InteropServices.SafeHandle,System.Byte*,System.Int32)">
            <summary>
            Reads a number of bytes from an open file descriptor into a specified buffer.
            </summary>
            <param name="fd">The open file descriptor to try to read from</param>
            <param name="buffer">The buffer to read info into</param>
            <param name="count">The size of the buffer</param>
            <returns>
            Returns the number of bytes read on success; otherwise, -1 is returned
            Note - on fail. the position of the stream may change depending on the platform; consult man 2 read for more info
            </returns>
        </member>
        <member name="M:Interop.Serial.Write(System.Runtime.InteropServices.SafeHandle,System.Byte*,System.Int32)">
            <summary>
            Writes the specified buffer to the provided open file descriptor
            </summary>
            <param name="fd">The file descriptor to try and write to</param>
            <param name="buffer">The data to attempt to write</param>
            <param name="bufferSize">The amount of data to write, in bytes</param>
            <returns>
            Returns the number of bytes written on success; otherwise, returns -1 and sets errno
            </returns>
        </member>
        <member name="M:Interop.Serial.Poll(Interop.PollEvent*,System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Polls a set of file descriptors for signals and returns what signals have been set
            </summary>
            <param name="pollEvents">A list of PollEvent entries</param>
            <param name="eventCount">The number of entries in pollEvents</param>
            <param name="timeout">The amount of time to wait; -1 for infinite, 0 for immediate return, and a positive number is the number of milliseconds</param>
            <param name="triggered">The number of events triggered (i.e. the number of entries in pollEvents with a non-zero TriggeredEvents). May be zero in the event of a timeout.</param>
            <returns>An error or Error.SUCCESS.</returns>
        </member>
        <member name="M:Interop.Serial.Poll(System.Runtime.InteropServices.SafeHandle,Interop.PollEvents,System.Int32,Interop.PollEvents@)">
            <summary>
            Polls a File Descriptor for the passed in flags.
            </summary>
            <param name="fd">The descriptor to poll</param>
            <param name="events">The events to poll for</param>
            <param name="timeout">The amount of time to wait; -1 for infinite, 0 for immediate return, and a positive number is the number of milliseconds</param>
            <param name="triggered">The events that were returned by the poll call. May be PollEvents.POLLNONE in the case of a timeout.</param>
            <returns>An error or Error.SUCCESS.</returns>
        </member>
        <member name="T:Interop.Error">
            <summary>Common Unix errno error codes.</summary>
        </member>
        <member name="M:Interop.CheckIo(System.Int64,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <param name="result">The result of the system call.</param>
            <param name="path">The path with which this error is associated.  This may be null.</param>
            <param name="isDirectory">true if the <paramref name="path"/> is known to be a directory; otherwise, false.</param>
            <param name="errorRewriter">Optional function to change an error code prior to processing it.</param>
            <returns>
            On success, returns the non-negative result long that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo(System.Int32,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the non-negative result int that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo(System.IntPtr,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the non-negative result IntPtr that was validated.
            </returns>
        </member>
        <member name="M:Interop.CheckIo``1(``0,System.String,System.Boolean,System.Func{Interop.ErrorInfo,Interop.ErrorInfo})">
            <summary>
            Validates the result of system call that returns greater than or equal to 0 on success
            and less than 0 on failure, with errno set to the error code.
            If the system call failed for any reason, an exception is thrown. Otherwise, the system call succeeded.
            </summary>
            <returns>
            On success, returns the valid SafeFileHandle that was validated.
            </returns>
        </member>
        <member name="M:Interop.GetExceptionForIoErrno(Interop.ErrorInfo,System.String,System.Boolean)">
            <summary>
            Gets an Exception to represent the supplied error info.
            </summary>
            <param name="errorInfo">The error info</param>
            <param name="path">The path with which this error is associated.  This may be null.</param>
            <param name="isDirectory">true if the <paramref name="path"/> is known to be a directory; otherwise, false.</param>
            <returns></returns>
        </member>
    </members>
</doc>
