<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reflection.Context</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requries unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="P:System.SR.ArgumentNull_GetterOrSetterMustBeSpecified">
            <summary>Either 'getter' or 'setter' must be specified.</summary>
        </member>
        <member name="P:System.SR.Argument_GetMethNotFnd">
            <summary>The get accessor of the property was not found.</summary>
        </member>
        <member name="P:System.SR.Argument_PropertyTypeFromDifferentContext">
            <summary>The property type needs to be mapped to the current ReflectionContext.</summary>
        </member>
        <member name="P:System.SR.Argument_SetMethNotFnd">
            <summary>The set accessor of the property was not found.</summary>
        </member>
        <member name="P:System.SR.Format_AttributeUsage">
            <summary>Duplicate AttributeUsageAttribute records found on attribute type {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_AddNullProperty">
            <summary>AddProperties returned a null property.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_AddPropertyDifferentContext">
            <summary>AddProperties returned a property not created by CustomReflectionContext.CreateProperty in the current reflection context.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_AddPropertyDifferentType">
            <summary>AddProperties returned a property that has already been added to another type.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_EnumLitValueNotFound">
            <summary>Literal value was not found.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_InvalidMemberType">
            <summary>The member {0} has an invalid MemberType {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_InvalidMethodType">
            <summary>The method is neither a MethodInfo nor a ConstructorInfo: {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_NotGenericMethodDefinition">
            <summary>{0} is not a GenericMethodDefinition. MakeGenericMethod may only be called on a method for which MethodBase.IsGenericMethodDefinition is true.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_NoTypeInfoForThisType">
            <summary>Cannot get the TypeInfo object from the Type object: {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_NullAttribute">
            <summary>The attribute object cannot be null.</summary>
        </member>
        <member name="P:System.SR.PlatformNotSupported_ReflectionContext">
            <summary>Customized reflection contexts are only supported on .NET Framework.</summary>
        </member>
        <member name="P:System.SR.Target_InstanceMethodRequiresTarget">
            <summary>Non-static method requires a target.</summary>
        </member>
        <member name="P:System.SR.Target_ObjectTargetMismatch">
            <summary>Object does not match target type.</summary>
        </member>
        <member name="P:System.SR.Argument_ObjectArgumentMismatch">
            <summary>Object of type '{0}' cannot be converted to type '{1}'.</summary>
        </member>
    </members>
</doc>
